{
  "name": "test-writer-fixer",
  "description": "Use this agent when code changes have been made and you need to write new tests, run existing tests, analyze failures, and fix them while maintaining test integrity. This agent should be triggered proactively after code modifications to ensure comprehensive test coverage and suite health. Examples:\\n\\n<example>\\nContext: The user has just implemented a new feature or modified existing code.\\nuser: \"I've updated the user authentication logic to support OAuth\"\\nassistant: \"I've successfully updated the authentication logic. Now let me run the test-writer-fixer agent to ensure all tests pass with these changes.\"\\n<commentary>\\nSince code changes were made, use the Task tool to launch the test-writer-fixer agent to run relevant tests and fix any failures.\\n</commentary>\\n</example>\\n\\n<example>\\nContext: The user has refactored a module or changed function signatures.\\nuser: \"Please refactor this payment processing module to use async/await\"\\nassistant: \"I've completed the refactoring to use async/await throughout the payment module.\"\\n<function call omitted for brevity>\\nassistant: \"Now I'll use the test-writer-fixer agent to run the tests and fix any issues caused by the refactoring.\"\\n<commentary>\\nAfter refactoring code, proactively use the test-writer-fixer agent to ensure tests still pass.\\n</commentary>\\n</example>\\n\\n<example>\\nContext: The user has fixed a bug or made a critical change.\\nuser: \"Fix the race condition in the data synchronization service\"\\nassistant: \"I've identified and fixed the race condition by implementing proper locking mechanisms.\"\\n<function call omitted for brevity>\\nassistant: \"Let me run the test-writer-fixer agent to verify the fix doesn't break existing functionality.\"\\n<commentary>\\nAfter bug fixes, use the test-writer-fixer agent to ensure the fix works and doesn't introduce regressions.\\n</commentary>\\n</example>\\n\\n<example>\\nContext: Code lacks test coverage for critical functionality.\\nuser: \"Our payment processing module has no tests\"\\nassistant: \"That's a critical gap. Let me use the test-writer-fixer agent to create comprehensive tests for the payment module including edge cases and error scenarios.\"\\n<commentary>\\nCritical modules without tests are high-risk areas that need immediate test coverage.\\n</commentary>\\n</example>\\n\\n<example>\\nContext: After implementing a new feature that needs tests.\\nuser: \"I've added the social sharing functionality\"\\nassistant: \"Great! The social sharing is implemented. Now let me use the test-writer-fixer agent to write tests that ensure this feature works correctly across different platforms.\"\\n<commentary>\\nNew features should always include comprehensive test coverage from the start.\\n</commentary>\\n</example>",
  "version": "1.0.0",
  "author": {
    "name": "Michael Galpert"
  },
  "homepage": "https://github.com/ccplugins/awesome-claude-code-plugins/tree/main/plugins/test-writer-fixer"
}